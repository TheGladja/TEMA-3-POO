#include <bits/stdc++.h>

using namespace std;

enum COMANDA {ONLINE, FIZIC};
enum PIZZA {VEGETARIANA, NONVEGETARIANA};

class Ingredient
{
    string denumire;
    int cantitate;
    int pretUnitar;
public:
    Ingredient();
    void setDenumire(string denumire)
    {
        this->denumire = denumire;
    }
    void setCantitate(int cantitate)
    {
        this->cantitate = cantitate;
    }
    void setPretUnitar(int pretUnitar)
    {
        this->pretUnitar = pretUnitar;
    }
    string getDenumire()
    {
        return denumire;
    }
    int getCantitate()
    {
        return cantitate;
    }
    int getPretUnitar()
    {
        return pretUnitar;
    }
    void operator =(Ingredient const &I)
    {
        cantitate= I.cantitate;
        denumire= I.denumire;
        pretUnitar= I.pretUnitar;
    }
    ~Ingredient();
};

Ingredient::Ingredient()
{
    denumire = "";
    cantitate = 0;
    pretUnitar = 0;
}

Ingredient::~Ingredient()
{
    denumire = "";
    cantitate = 0;
    pretUnitar = 0;
}

///--------------------------------------------------------------------------------

class CalculPret
{
public:
    virtual double calculPret(int idPizza) = 0;
};

///--------------------------------------------------------------------------------

class Meniu
{
protected:
    unordered_map<int,vector<Ingredient>> umap;
    int idPizza;
    static int nrOrd;
    bool tipPizza;

public:
    Meniu();
    ~Meniu();
};

Meniu::Meniu()
{
    idPizza = 0;
}

Meniu::~Meniu()
{
    idPizza = 0;
}

int Meniu::nrOrd = 0;

///----------------------------------------------------------------------------------

class Comanda_Online: public Meniu
{
public:
    int optiune;
    PIZZA pizza;

public:
    Comanda_Online(): Meniu()
    {};
    friend istream& operator>> (istream& in, Comanda_Online& C);
    friend ostream& operator<< (ostream& out, const Comanda_Online& C);
};

istream& operator>> (istream& in, Comanda_Online& C)
{
    cout<<"\nIntroduceti numarul produsului dorit: ";
    in>>C.optiune;
    try
    {
        if(C.optiune>5)
            throw 4;
    }
    catch(int x)
    {
        if(x==4)
        {
            cout<<"\nNu exista pizza cu numarul "<<C.optiune;
            cout<<"\nIntroduceti un numar dintre urmatoarele: 1, 2, 3, 4, 5";
            cout<<"\nIntroduceti optiunea din nou: ";
            in>>C.optiune;
        }
    }
    return in;
}

ostream& operator<< (ostream& out, const Comanda_Online& C)
{
    out<<"\nPentru pizza vegetariana aveti urmatoarele optiuni:";
    out<<"\n1.Pizza Margherita- 20 de lei";
    out<<"\n2.Pizza Marinara- 23 de lei";
    out<<"\n3.Pizza Quattro Formaggi- 18 lei";
    out<<"\n4.Pizza Ortolana- 19 lei";
    out<<"\n5.Pizza Frutti di Mare- 24 de lei";
    return out;
}

///----------------------------------------------------------------------------------

class Pizza: public CalculPret, public Comanda_Online
{
protected:
    COMANDA comanda;
    int manopera = 15;
    int numarIngrediente;
    int distanta;
    Comanda_Online C;

public:

    Pizza();
    double calculPret(int idPizza);
    friend istream& operator >> (istream& in, Pizza& P);
    friend ostream& operator<< (ostream& out, Pizza& P);
    ~Pizza();
};

Pizza::Pizza(): Comanda_Online()
{
    numarIngrediente = 0;
    nrOrd++;
    idPizza = nrOrd;
}

istream& operator >> (istream& in, Pizza& P)
{
    int i, command;
    cout<<"\nTipul comenzii (1-ONLINE/0-FIZIC): ";
    in>>command;
    if(command==1)
    {
        P.comanda = ONLINE;
        cout<<"\nDistanta care trebuie parcursa: ";
        in>>P.distanta;
        cout<<"\nTipul pizzei (1-vegetariana/0-nonvegetariana): ";
        in>>P.tipPizza;
        if(P.tipPizza)
            P.C.pizza = VEGETARIANA;
        else
            P.C.pizza = NONVEGETARIANA;
        if(!P.tipPizza)
        {
            cout<<"\nNumarul de ingrediente: ";
            in>>P.numarIngrediente;
            for(i=0; i<P.numarIngrediente; i++)
            {
                string denumire;
                int cantitate, pretUnitar;
                Ingredient x;
                cout<<"\nDenumirea: ";
                in>>denumire;
                cout<<"Cantitatea (grame): ";
                in>>cantitate;
                cout<<"Pretul (lei): ";
                in>>pretUnitar;
                x.setCantitate(cantitate);
                x.setDenumire(denumire);
                x.setPretUnitar(pretUnitar);
                P.umap[P.idPizza].push_back(x);
            }
        }
        else
        {
            cout<<P.C;
            cout<<"\n";
            cin>>P.C;
        }
    }
    else
    {
        P.comanda = FIZIC;
        cout<<"\nNumarul de ingrediente: ";
        in>>P.numarIngrediente;
        for(i=0; i<P.numarIngrediente; i++)
        {
            string denumire;
            int cantitate, pretUnitar;
            Ingredient x;
            cout<<"\nDenumirea: ";
            in>>denumire;
            cout<<"Cantitatea (grame): ";
            in>>cantitate;
            cout<<"Pretul (lei): ";
            in>>pretUnitar;
            x.setCantitate(cantitate);
            x.setDenumire(denumire);
            x.setPretUnitar(pretUnitar);
            P.umap[P.idPizza].push_back(x);
        }
    }
    return in;
}


ostream& operator<< (ostream& out, Pizza& P)
{
    int ct=0;
    out<<"\nComanda cu ID-ul: "<<P.idPizza;
    if(P.comanda==ONLINE)
        out<<"\nComanda este facuta in mediul online"<<"\nDistanta parcursa este de "<<P.distanta<<" km";
    else
    {
        P.C.pizza = NONVEGETARIANA;
        out<<"\nComanda este facuta fizic";
    }
    if(P.C.pizza==NONVEGETARIANA)
    {
        out<<"\nNumarul de ingrediente: "<<P.numarIngrediente;
        out<<"\n";
        for(Ingredient I: P.umap[P.idPizza])
        {
            ct++;
            out<<"\nIngredientul numarul: "<<ct;
            out<<"\nDenumirea: "<<I.getDenumire();
            out<<"\nCantitatea: "<<I.getCantitate();
            out<<"\nPretul unitar: "<<I.getPretUnitar()<<" lei";
            out<<"\n";
        }
    }
    else
    {
        if(P.C.optiune==1)
            out<<"\nAti comandat o Pizza Margherita\n";
        else if(P.C.optiune==2)
            out<<"\nAti comandat o Pizza Marinara\n";
        else if(P.C.optiune==3)
            out<<"\nAti comandat o Quattro Formaggi\n";
        else if(P.C.optiune==4)
            out<<"\nAti comandat o Ortolana\n";
        else
            out<<"\nAti comandat o Frutti di Mare\n";
    }
    out<<"\nPretul total este (manopera inclusa): "<<P.calculPret(P.idPizza)<<" lei\n";
    return out;
}


double Pizza::calculPret(int idPizza)
{
    double pret=0;
    if(comanda==FIZIC)
    {
        for(Ingredient I: umap[idPizza])
            pret += I.getPretUnitar();
        pret += manopera;
    }
    else
    {
        if(C.pizza==NONVEGETARIANA)
        {
            for(Ingredient I: umap[idPizza])
                pret += I.getPretUnitar();
            pret += manopera;
        }
        else
        {
            if(C.optiune==1)
                pret = 20;
            else if(C.optiune==2)
                pret = 23;
            else if(C.optiune==3)
                pret = 18;
            else if(C.optiune==4)
                pret = 19;
            else
                pret = 24;
        }
        pret += (double)((distanta/10)*pret*5/100);
    }
    return pret;
}

Pizza::~Pizza()
{
    numarIngrediente= 0;
    idPizza = 0;
}

int main()
{
    int i, task;
    vector <Pizza> p;
    do
    {
        cout<<"\nNumarul de comenzi: "<<p.size();
        cout<<"\nApasati tasta 1 pentru a adauga o comanda";
        cout<<"\nApasati tasta 2 pentru a vizualiza o comanda";
        cout<<"\nApasati tasta 3 pentru a vizualiza toate comenzile";
        cout<<"\nApasati tasta 4 pentru a inchide programul\n";
        cin>>task;
        try
        {
            if(task!=1 && task!=2 && task!=3 && task!=4)
                throw 1;
            if(p.size()==0 && (task==2 || task==3))
                throw 2;
        }
        catch(int x)
        {
            if(x==1)
            {
                cout<<"\nTrebuie sa introduceti un numar dintre urmatoarele: 1, 2, 3, 4;";
                cout<<"\nIntroduceti optiunea din nou: ";
                cin>>task;
            }
            else if(x==2)
            {
                cout<<"\nLista comenzilor este goala";
                cout<<"\nTrebuie sa apasati tasta 1 pentru a introduce o comanda";
                cout<<"\nIntroduceti optiunea din nou: ";
                cin>>task;
            }
        }
        switch(task)
        {
        case 1:
        {
            Pizza P;
            cin>>P;
            p.push_back(P);
            break;
        }
        case 2:
        {
            int id;
            cout<<"\nIntroduceti numarul comenzii pe care doriti sa o vizualizati: ";
            cin>>id;
            try
            {
                if(id>p.size())
                    throw 3;
            }
            catch(int x)
            {
                if(x==3)
                    cout<<"\nNu exista comanda cu numarul "<<id;
                    cout<<"\nTrebuie sa introduceti un numar din intervalul [1, "<<p.size()<<"] :";
                    cin>>id;
            }
            id--;
            cout<<p[id];
            break;
        }
        case 3:
        {
            for(auto ir=p.begin(); ir!=p.end(); ir++)
                cout<<(*ir);
            break;
        }
        }
    }
    while(task==1 || task==2 || task==3);
    cout<<"\nProgramul a fost inchis cu succes\n";
    return 0;
}
